ROLE: Senior React + shadcn/radix engineer + Build/Tooling
CONTEXT:
- App runs on Replit. Frontend shows:
  • Service worker registered (informational)
  • Deprecation: <meta name="apple-mobile-web-app-capable" content="yes"> → should add <meta name="mobile-web-app-capable" content="yes">
  • React warning: "Missing `Description` or `aria-describedby={undefined}` for {DialogContent}."
- User symptom: "Can't create bank account" from Admin screen. Likely a failing POST or form state issue.
- Tech guess: React + shadcn/ui (Radix Dialog). Vite/Next unknown—assume Vite unless code says otherwise.

TASKS (do all, minimal & surgical):
1) Accessibility/Modal Fix
   - In every Dialog that contains a form (e.g., Create Bank Account), ensure:
     - <DialogTitle id="bank-dialog-title"> and <DialogDescription id="bank-dialog-desc"> exist.
     - <DialogContent aria-labelledby="bank-dialog-title" aria-describedby="bank-dialog-desc"> is wired.
     - Add focus management (default autofocus to first input) and Esc/overlay close behavior preserved.

2) Meta Tag Update
   - In public/index.html (or app/index.html), add:
     <meta name="mobile-web-app-capable" content="yes">
   - Keep the apple tag for iOS but silence the deprecation warning if possible by adding the mobile-web-app-capable line.

3) Bank Account Create Flow – Hardening & Logging
   - Find the Create Bank Account form component (e.g., AdminBankDialog.tsx/tsx or CreateBankAccountModal.jsx).
   - Ensure controlled inputs with explicit initial state:
     { bankName, accountName, accountNumber, bankCode?, swift?, branch?, notes? }
   - Add validation (required fields + basic patterns).
   - On submit:
     - Disable button while pending.
     - POST to /api/bank-accounts (or the actual endpoint) with JSON.
     - If non-2xx, show toast with status + server message.
     - Console.log detailed error once (dev only).

4) Add a tiny network logger around the create call (DEV only)
   - Wrap fetch/axios so we log method, url, status, and body on failure. Strip secrets.

5) CORS/Headers (if frontend and backend are different origins on Replit):
   - Backend must set CORS: origin allowlist including the frontend URL; credentials only if needed.

6) Provide exact code patches (file path + full patched components), no pseudo-code. Keep changes minimal.

7) Give a manual test checklist:
   - Open modal via Admin → Create Bank Account
   - Keyboard-only: open, tab through, submit, Esc to close
   - Submit invalid → get inline errors
   - Submit valid → 200 OK, dialog closes, list refreshes
   - Network tab shows 200 and JSON of created account

CONSTRAINTS:
- Don’t refactor unrelated code.
- No heavy deps. Use existing toast and form libs.
- Add short comments // WHY for non-obvious bits.
